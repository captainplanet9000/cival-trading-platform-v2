import { NextRequest, NextResponse } from 'next/server';

/**
 * Enhanced Trading API with PydanticAI Integration
 * Bridges existing Google SDK/A2A systems with PydanticAI intelligence
 */

// TypeScript interfaces matching PydanticAI models
interface TradingDecision {
  action: 'buy' | 'sell' | 'hold' | 'close';
  symbol: string;
  quantity: number;
  price?: number;
  confidence: number; // 0-1
  risk_level: 'low' | 'medium' | 'high' | 'extreme';
  reasoning: string;
  stop_loss?: number;
  take_profit?: number;
  timeframe: string;
}

interface TradingAnalysisRequest {
  symbol: string;
  account_id: string;
  strategy_id?: string;
  market_data: Record<string, any>;
  context?: Record<string, any>;
}

interface EnhancedTradingResponse {
  agent_id: string;
  pydantic_ai_enhanced: boolean;
  decision: TradingDecision;
  reasoning: string;
  confidence: number;
  integration_status: {
    google_sdk: string;
    a2a_protocol: string;
    market_analyst: string;
    risk_monitor: string;
  };
  timestamp: number;
  api_version: string;
  fallback_used: boolean;
  processing_time: number;
  compliance_status: string;
  integration_benefits: string[];
}

const PYDANTIC_AI_SERVICE_URL = process.env.PYDANTIC_AI_SERVICE_URL || 'http://localhost:9000';

// Enhanced trading analysis with PydanticAI
async function enhancedTradingAnalysis(request: TradingAnalysisRequest): Promise<EnhancedTradingResponse> {
  try {
    const response = await fetch(`${PYDANTIC_AI_SERVICE_URL}/api/agents/trading-coordinator`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PYDANTIC_AI_API_KEY || 'dev-key'}`
      },
      body: JSON.stringify(request),
      signal: AbortSignal.timeout(30000) // 30 second timeout
    });

    if (!response.ok) {
      throw new Error(`PydanticAI service error: ${response.status}`);
    }

    const enhancedResult = await response.json();
    
    return {
      ...enhancedResult,
      pydantic_ai_enhanced: true,
      api_version: 'v2-pydantic-enhanced',
      fallback_used: false,
      timestamp: Date.now(),
      compliance_status: 'validated',
      integration_benefits: [
        'structured_decision_making',
        'type_safe_outputs', 
        'enhanced_reasoning',
        'coordinated_agent_communication'
      ]
    };
  } catch (error) {
    console.error('PydanticAI service error:', error);
    throw error;
  }
}

// Fallback to existing trading analysis (when PydanticAI unavailable)
async function fallbackTradingAnalysis(request: TradingAnalysisRequest): Promise<EnhancedTradingResponse> {
  // Simulate existing system analysis
  const decision: TradingDecision = {
    action: 'hold',
    symbol: request.symbol,
    quantity: 100,
    confidence: 0.7,
    risk_level: 'medium',
    reasoning: 'Fallback analysis: Market conditions require cautious approach',
    timeframe: '1h'
  };

  return {
    agent_id: 'fallback-agent',
    pydantic_ai_enhanced: false,
    decision,
    reasoning: 'Generated by fallback system (PydanticAI unavailable)',
    confidence: 0.7,
    integration_status: {
      google_sdk: 'connected',
      a2a_protocol: 'connected', 
      market_analyst: 'offline',
      risk_monitor: 'offline'
    },
    timestamp: Date.now(),
    api_version: 'v1-fallback',
    fallback_used: true,
    processing_time: 150,
    compliance_status: 'basic_validation',
    integration_benefits: ['basic_analysis']
  };
}

// POST - Enhanced trading analysis
export async function POST(request: NextRequest) {
  try {
    const body: TradingAnalysisRequest = await request.json();
    
    // Input validation
    if (!body.symbol || !body.account_id) {
      return NextResponse.json(
        { error: 'Missing required fields: symbol, account_id' },
        { status: 400 }
      );
    }

    // Try PydanticAI enhanced analysis first
    let enhancedResult: EnhancedTradingResponse;
    
    try {
      enhancedResult = await enhancedTradingAnalysis(body);
    } catch (pydanticError) {
      console.warn('PydanticAI unavailable, using fallback:', pydanticError);
      enhancedResult = await fallbackTradingAnalysis(body);
    }

    return NextResponse.json(enhancedResult);

  } catch (error) {
    console.error('Enhanced trading analysis error:', error);
    
    // Final fallback
    try {
      const body = await request.json();
      const fallbackResult = await fallbackTradingAnalysis(body);
      return NextResponse.json(fallbackResult);
    } catch (fallbackError) {
      return NextResponse.json(
        { error: 'Trading analysis service unavailable' },
        { status: 503 }
      );
    }
  }
}

// GET - Trading analysis status and capabilities
export async function GET(request: NextRequest) {
  const url = new URL(request.url);
  const checkStatus = url.searchParams.get('status') === 'true';
  
  if (checkStatus) {
    try {
      // Check PydanticAI service health
      const healthResponse = await fetch(`${PYDANTIC_AI_SERVICE_URL}/health`, {
        signal: AbortSignal.timeout(5000)
      });
      
      const healthData = await healthResponse.json();
      
      return NextResponse.json({
        pydantic_ai_status: healthResponse.ok ? 'online' : 'offline',
        service_health: healthData,
        capabilities: {
          enhanced_decisions: true,
          type_safety: true,
          confidence_scoring: true,
          risk_assessment: true,
          agent_coordination: true
        },
        fallback_available: true,
        api_version: 'v2-pydantic-enhanced'
      });
    } catch (error) {
      return NextResponse.json({
        pydantic_ai_status: 'offline',
        service_health: null,
        capabilities: {
          enhanced_decisions: false,
          type_safety: false,
          confidence_scoring: false,
          risk_assessment: false, 
          agent_coordination: false
        },
        fallback_available: true,
        api_version: 'v1-fallback',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  return NextResponse.json({
    message: 'Enhanced Trading API with PydanticAI Integration',
    endpoints: {
      'POST /api/ai/trading': 'Enhanced trading analysis',
      'GET /api/ai/trading?status=true': 'Service health check'
    },
    features: [
      'Type-safe trading decisions',
      'Confidence scoring',
      'Risk assessment integration',
      'Google SDK compatibility',
      'A2A protocol enhancement',
      'Graceful fallback system'
    ]
  });
}