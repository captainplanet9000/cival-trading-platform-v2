/**
 * Agent Trading System Types
 * 
 * TypeScript definitions that align with the Supabase database schema
 * for the agent trading system.
 */

// Agent Trading Permissions Types
export interface AgentTradingPermissions {
  id: string;
  agent_id: string;
  account_id: string;
  max_trade_size: number;
  max_position_size: number;
  max_daily_trades: number;
  allowed_symbols: string[];
  allowed_strategies: string[];
  risk_level: string;
  is_active: boolean;
  created_at: string;
  updated_at?: string;
}

export interface AgentTradingPermissionsInsert {
  agent_id: string;
  account_id: string;
  max_trade_size: number;
  max_position_size: number;
  max_daily_trades: number;
  allowed_symbols: string[];
  allowed_strategies: string[];
  risk_level: string;
  is_active?: boolean;
}

export interface AgentTradingPermissionsUpdate {
  max_trade_size?: number;
  max_position_size?: number;
  max_daily_trades?: number;
  allowed_symbols?: string[];
  allowed_strategies?: string[];
  risk_level?: string;
  is_active?: boolean;
  updated_at?: string;
}

// Agent Trade Types
export interface AgentTrade {
  id: string;
  agent_id: string;
  trade_id: string;
  order_id: string;
  symbol: string;
  side: 'buy' | 'sell';
  quantity: number;
  price: number;
  order_type: string;
  strategy?: string;
  reasoning?: string;
  status: string;
  exchange: string;
  executed_at: string;
  created_at: string;
}

export interface AgentTradeInsert {
  agent_id: string;
  trade_id: string;
  order_id: string;
  symbol: string;
  side: 'buy' | 'sell';
  quantity: number;
  price: number;
  order_type: string;
  strategy?: string;
  reasoning?: string;
  status: string;
  exchange: string;
  executed_at: string;
}

export interface AgentTradeUpdate {
  status?: string;
  executed_at?: string;
}

// Agent Position Types
export interface AgentPosition {
  id: string;
  agent_id: string;
  symbol: string;
  side: 'long' | 'short';
  size: number;
  average_price: number;
  current_price: number;
  unrealized_pnl: number;
  realized_pnl: number;
  is_open: boolean;
  opened_at: string;
  closed_at?: string;
  created_at: string;
  updated_at?: string;
}

export interface AgentPositionInsert {
  agent_id: string;
  symbol: string;
  side: 'long' | 'short';
  size: number;
  average_price: number;
  current_price: number;
  unrealized_pnl?: number;
  realized_pnl?: number;
  is_open?: boolean;
  opened_at: string;
}

export interface AgentPositionUpdate {
  size?: number;
  current_price?: number;
  unrealized_pnl?: number;
  realized_pnl?: number;
  is_open?: boolean;
  closed_at?: string;
  updated_at?: string;
}

// TODO: Complete type definitions and re-enable Database interface
// Database table types - these will be generated by Supabase gen types
/*
export interface Database {
  public: {
    Tables: {
      agent_trading_permissions: {
        Row: AgentTradingPermissions;
        Insert: AgentTradingPermissionsInsert;
        Update: AgentTradingPermissionsUpdate;
      };
      agent_trades: {
        Row: AgentTrade;
        Insert: AgentTradeInsert;
        Update: AgentTradeUpdate;
      };
      agent_positions: {
        Row: AgentPosition;
        Insert: AgentPositionInsert;
        Update: AgentPositionUpdate;
      };
      agent_performance: {
        Row: AgentPerformance;
        Insert: AgentPerformanceInsert;
        Update: AgentPerformanceUpdate;
      };
      agent_status: {
        Row: AgentStatus;
        Insert: AgentStatusInsert;
        Update: AgentStatusUpdate;
      };
      agent_market_data_subscriptions: {
        Row: AgentMarketDataSubscription;
        Insert: AgentMarketDataSubscriptionInsert;
        Update: AgentMarketDataSubscriptionUpdate;
      };
      agent_state: {
        Row: AgentState;
        Insert: AgentStateInsert;
        Update: AgentStateUpdate;
      };
      agent_checkpoints: {
        Row: AgentCheckpoint;
        Insert: AgentCheckpointInsert;
        Update: AgentCheckpointUpdate;
      };
      agent_decisions: {
        Row: AgentDecision;
        Insert: AgentDecisionInsert;
        Update: AgentDecisionUpdate;
      };
    };
  };
}
*/
